{
    "collab_server" : "",
    "contents" : "\n\n# To start the app, you have to enter these 2 commands in the Console below:\n#\n# library(shiny)\n# runApp(appDir = getwd(), port = 4355, launch.browser = F, host = getOption(\"shiny.host\", \"127.0.0.1\"), display.mode = \"normal\")\n#\n# If you run it instead with the \"Run App\" button, the port will be randomly assigned and the CCP auth server cannot send your credentials back to right address.\n# If your browser does not open automatically, type in this address: http://127.0.0.1:4355\n\n\n\nlibrary(shiny)\nlibrary(httr)\nlibrary(\"rjson\")\nlibrary(data.table)\nlibrary(sqldf)\nlibrary(ggplot2)\nlibrary(openssl)\nsource(\"config.R\")\n\noptions(scipen = 999)\n\nfunction(input, output, session) {\n\n\n  getTokenNew <- function(loginCode){\n    loginCode <- toJSON(loginCode)\n    buildPostBody <- paste('{\"grant_type\": \"authorization_code\",\"code\":', loginCode, '}')\n    r <- POST(\"https://login.eveonline.com/oauth/token\", body = buildPostBody,\n              add_headers(Authorization=paste(c(\"Basic \", base64_encode(charToRaw(paste(c(appClient_ID,\":\", appSecret), collapse = \"\")))), collapse = \"\"), `Content-Type`=\"application/json\"))\n    stop_for_status(r)\n    rtojson <- content(r, \"parsed\", \"application/json\")\n    \n    authcode <- rtojson$access_token\n    refreshcode <- toJSON(rtojson$refresh_token)\n    buildAuthcode <- paste(c(\"Bearer\", authcode), collapse = \" \")\n    returnList <- list(\"authcode\" = authcode, \"refreshcode\" = refreshcode, \"buildAuthcode\" = buildAuthcode)\n    return(returnList)\n  \n  }\n  \n  getTokenFromRefresh <- function(refreshcode){\n    buildPostBody <- paste('{\"grant_type\": \"refresh_token\",\"refresh_token\":', refreshcode, '}')\n    r <- POST(\"https://login.eveonline.com/oauth/token\", body = buildPostBody,\n              add_headers(Authorization=paste(c(\"Basic \", base64_encode(charToRaw(paste(c(appClient_ID,\":\", appSecret), collapse = \"\")))), collapse = \"\"), `Content-Type`=\"application/json\"))\n    stop_for_status(r)\n    rtojson <- content(r, \"parsed\", \"application/json\")\n    \n    authcode <- rtojson$access_token\n    refreshcode <- toJSON(rtojson$refresh_token)\n    buildAuthcode <- paste(c(\"Bearer\", authcode), collapse = \" \")\n    returnList <- list(\"authcode\" = authcode, \"refreshcode\" = refreshcode, \"buildAuthcode\" = buildAuthcode)\n    return(returnList)\n    \n  }\n  \n  \n  \n  getCharacterID <- function(buildAuthcode){\n    charInfoRequest <- GET(\"https://login.eveonline.com/oauth/verify\", add_headers(Authorization = buildAuthcode))\n    stop_for_status(charInfoRequest)\n    charInfoParsed <- content(charInfoRequest, \"parsed\", \"application/json\")\n    charID <- charInfoParsed$CharacterID\n    return(charID)\n  }\n  \n  getCharacterName <- function(charID){\n    receivedName <- GET(\"https://esi.tech.ccp.is\", path=paste0(\"/latest/characters/names/?character_ids=\",charID,\"&datasource=tranquility\", collapse=\"\"))\n    namefromresponse <- content(receivedName, \"parsed\", \"application/json\")\n    return(namefromresponse[[1]][['character_name']])\n  }\n  \n  getCharacterImage <- function(charID){\n    receivedPaths <- GET(\"https://esi.tech.ccp.is\", path=paste0(\"/latest/characters/\",charID,\"/portrait/?datasource=tranquility\", collapse=\"\"))\n    pathsfromresponse <- content(receivedPaths, \"parsed\", \"application/json\")\n    return(pathsfromresponse[[\"px64x64\"]])\n  }\n  \n  getWalletTransactions <- function(buildAuthcode, CharacterID){\n    requestPath <- paste(c(\"latest/characters/\", CharacterID, \"/wallet/transactions/\"), collapse = \"\")\n    walletTransactionsRequest <- GET(\"https://esi.tech.ccp.is\", path=requestPath, add_headers(Authorization = buildAuthcode))\n    stop_for_status(walletTransactionsRequest)\n    walletTransactions <- content(walletTransactionsRequest, \"parsed\", \"application/json\")\n    \n    return(walletTransactions)\n    \n  }\n  \n  \n    \n  \n  netfunction <- function(itemType) {\n    tbl <- characterObj()[[\"transactRich\"]]\n    \n    subbuy <- subset(tbl, (tbl[[\"typeName\"]] == itemType & tbl[[\"is_buy\"]]==TRUE) )\n    subsell <- subset(tbl, (tbl[[\"typeName\"]] == itemType & tbl[[\"is_buy\"]]==FALSE) )\n    subbuy <- sum(subbuy[[\"unit_price\"]] * subbuy[[\"quantity\"]])*-1\n    subsell <- sum(subsell[[\"unit_price\"]] * subsell[[\"quantity\"]])\n    return(subbuy+subsell) \n  }\n  \n  replaceBoolWithFactors <- function(tbl){\n    \n    tbl$is_buy[tbl$is_buy == TRUE] <- -1\n    tbl$is_buy[tbl$is_buy == FALSE] <- 1\n    \n    return(tbl)\n  }\n  \n  rewriteSellBuyEntries <- function(joinedCSVtables){\n    tbl <- joinedCSVtables\n    tbl$is_buy[tbl$is_buy == TRUE] <- \"buy\"\n    tbl$is_buy[tbl$is_buy == FALSE] <- \"sell\"\n    \n    return(tbl)\n  }\n\n  \n  downloadedData <- reactive({\n    parseQueryString(session$clientData$url_search)\n                     })\n  \n  retrieveData <- function (){\n    \n    if (!is.null(downloadedData()[['code']])){\n      getResponse <- downloadedData()[['code']]\n      \n      #get token from login auth\n      TokenNew <- getTokenNew(getResponse)\n      authcode <- TokenNew$authcode\n      refreshcode <- TokenNew$refreshcode\n      buildAuthcode <- TokenNew$buildAuthcode\n      \n      #use token to ask login server for character ID\n      CharacterID <- getCharacterID(buildAuthcode)\n      #use ID to ask for character name (no token needed)\n      CharacterName <- getCharacterName(CharacterID)\n      #use ID to ask for character image path (no token needed)\n      CharacterImage <- getCharacterImage(CharacterID)\n      \n      #prepare new token\n      TokenNew <- getTokenFromRefresh(refreshcode)\n      authcode <- TokenNew$authcode\n      refreshcode <- TokenNew$refreshcode\n      buildAuthcode <- TokenNew$buildAuthcode\n      \n      #use token to call transactions\n      WalletTransactions <- getWalletTransactions(buildAuthcode, CharacterID)\n      \n      #prepare new token\n      TokenNew <- getTokenFromRefresh(refreshcode)\n      authcode <- TokenNew$authcode\n      refreshcode <- TokenNew$refreshcode\n      buildAuthcode <- TokenNew$buildAuthcode\n      \n      csvtable <- rbindlist(WalletTransactions, fill=T)\n      \n      invTable <- read.csv2(file=file.path(\"www\", \"invTypes.csv\"), header=TRUE, sep=\",\", dec=\".\", stringsAsFactors=FALSE)\n      \n      joinedCSVtables <- sqldf('SELECT csvtable.date, csvtable.transaction_id, csvtable.quantity, \"typeName\", csvtable.type_id, csvtable.unit_price, csvtable.client_id, \"client_name\", csvtable.location_id, \"stationName\", csvtable.is_buy, csvtable.is_personal, csvtable.journal_ref_id FROM csvtable INNER JOIN invTable ON csvtable.type_id=\"typeID\"')\n      oldFormatDL <- rewriteSellBuyEntries(joinedCSVtables)\n      oldFormatDL$date <- gsub(\"T\", \" \", oldFormatDL$date)\n      oldFormatDL$date <- gsub(\"Z\", \"\", oldFormatDL$date)\n      \n      characterObj <- list(transactRich = joinedCSVtables, transactSlim = csvtable, transactOld = oldFormatDL, ID = CharacterID, name = CharacterName, portrait=CharacterImage, refreshToken = refreshcode)\n      \n    }else{\n      joinedCSVtables <- read.csv2(file=file.path(\"www\", \"bigtestsheet.csv\"), header=TRUE, sep=\",\", dec=\".\", stringsAsFactors=FALSE)\n      CharacterID = 7777\n      CharacterName = \"Sample Capsuleer\"\n      refreshcode = \"77iSk77ok77isTruth\"\n      silhouette = \"https://image.eveonline.com/Character/1_64.jpg\"\n      characterObj <- list(transactRich = joinedCSVtables, transactSlim = \"\", transactOld = joinedCSVtables, ID = CharacterID, name = CharacterName, portrait=silhouette, refreshToken = refreshcode)\n    }\n    return(characterObj)\n  }\n  \n  characterObj <- reactive(\n    {\n      retrieveData()\n    }\n  )\n  \n\n  \n  # --download buttons --\n  #old format\n  output$downloadData <- downloadHandler(\n    filename = function() {\n      paste(input$dataset, \".csv\", sep = \"\")\n    },\n    \n    content = function(file) {\n      write.table(characterObj()[[\"transactOld\"]], file, sep=\",\", col.names=input$headers, row.names=F)\n    }\n  )\n  #new format\n  output$downloadSlim <- downloadHandler(\n    filename = function() {\n      paste(input$dataset, \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write.table(characterObj()[[\"transactSlim\"]], file, sep=\",\", col.names=input$headers, row.names=F)\n    }\n  )\n  \n  \n  # dropdown for net calculation\n  output$dropdown = renderUI({\n    \n    \n    selectInput(\"dynamic\", \"Select item for buy/sell net calculation\",\n                 choices = sort(unique(characterObj()[[\"transactRich\"]][[\"typeName\"]])),\n                 multiple = F,\n                 selectize=FALSE\n  )})\n  \n\n  # character Name\n  output$characterName <- renderText({\n    paste(characterObj()[[\"name\"]])\n  })\n  \n  #character ID\n  output$charID <- renderText({\n    paste(characterObj()[[\"ID\"]])\n  })\n  \n  #character portrait\n  output$portrait <- renderText({\n    c('<img src=\"',characterObj()[[\"portrait\"]],'\">')\n  })\n  \n  # current refresh token\n  output$refreshToken <- renderText({\n    paste(characterObj()[[\"refreshToken\"]])\n  })\n  \n  output$distPlot <- renderPlot({\n    tbl <- replaceBoolWithFactors(characterObj()[[\"transactRich\"]])\n    price <- tbl[[\"unit_price\"]] * tbl[[\"is_buy\"]] * tbl[[\"quantity\"]]\n    itemNames <- tbl[[\"typeName\"]]\n    \n    pred <- data.frame(price,itemNames)\n    data <- aggregate(price ~., data = pred, sum)\n    \n    ggplot(data)+aes(x= reorder(itemNames,-price), price, label=format(price, big.mark=\",\"))+\n      geom_bar(stat=\"identity\", position=\"dodge\")+\n      geom_label()+\n      coord_cartesian(xlim=c(input$topX, input$topX+5))+\n      labs(x=\"Item\", y=\"ISK\")\n    \n    \n  })\n  \n  output$timeline <- renderPlot({\n    tbl <- characterObj()[[\"transactRich\"]]\n    reformatDates <- strptime(characterObj()[[\"transactRich\"]][[\"date\"]], format=\"%Y-%m-%dT%H:%M:%SZ\")\n    tbl$hour <- reformatDates$hour\n    \n    ggplot(tbl)+aes(as.Date(date, format=\"%Y-%m-%dT%H:%M:%SZ\"), unit_price, color=hour, size=unit_price)+\n      geom_point(stat=\"identity\")+\n      scale_color_gradient2(low=\"blue\", high=\"blue\", mid=\"gold\", midpoint=19, guide = \"legend\", space = \"Lab\")+\n      labs(x=\"Date\", y=\"ISK\")\n  })\n  \n  output$skilltradingPlot <- renderPlot({\n    tbl <- characterObj()[[\"transactRich\"]]\n    subtbl <- subset(tbl, tbl[[\"typeName\"]] == \"Skill Extractor\" | tbl[[\"typeName\"]] == \"Large Skill Injector\" | tbl[[\"typeName\"]] == \"Small Skill Injector\" | tbl[[\"typeName\"]] == \"PLEX\" | tbl[[\"typeName\"]] == \"Multiple Pilot Training Certificate\")\n    subtbl <- replaceBoolWithFactors(subtbl)\n    subtbl$weighted <- subtbl[[\"unit_price\"]] * subtbl[[\"is_buy\"]] * subtbl[[\"quantity\"]]\n    subtbl$factored <- subtbl[[\"unit_price\"]] * subtbl[[\"is_buy\"]]\n    \n    \n    ggplot(subtbl, aes(as.Date(date, format=\"%Y-%m-%dT%H:%M:%SZ\"), factored, colour = typeName))+\n      geom_line()+\n      geom_point()+\n      labs(x=\"Date\", y=\"ISK\")\n  })\n  \n  output$skillTradingNet <- renderPlot({\n    tbl <- characterObj()[[\"transactRich\"]]\n    subtblHarvest <- subset(tbl, tbl[[\"typeName\"]] == \"Skill Extractor\" | tbl[[\"typeName\"]] == \"Large Skill Injector\" | tbl[[\"typeName\"]] == \"Small Skill Injector\")\n    subtblSowing <- subset(tbl, tbl[[\"typeName\"]] == \"PLEX\" | tbl[[\"typeName\"]] == \"Multiple Pilot Training Certificate\")\n    subtblHarvest <- replaceBoolWithFactors(subtblHarvest)\n    subtblSowing <- replaceBoolWithFactors(subtblSowing)\n    \n    netHarvest <- sum(subtblHarvest[[\"unit_price\"]] * subtblHarvest[[\"quantity\"]])\n    netSowing <- sum(subtblSowing[[\"unit_price\"]] * subtblSowing[[\"quantity\"]])\n    legend <- c(\"ISK sink\", \"ISK harvest\")\n    netValues <- c(netSowing, netHarvest)\n    \n    netdf <- data.frame(legend, netValues)\n    \n    ggplot(netdf, aes(x= legend, y=netValues, label=format(netValues, big.mark=\",\")))+\n      geom_bar(stat=\"identity\", aes(fill=legend))+\n      geom_label()\n    \n  })\n  \n  output$arbitrage <- renderPlot({\n    tbl <- characterObj()[[\"transactRich\"]]\n    focussedItem <- subset(tbl, tbl[[\"typeName\"]] == input$dynamic)\n    focussedItemSell <- subset(focussedItem, focussedItem[[\"is_buy\"]] == FALSE)\n    focussedItemBuy <- subset(focussedItem, focussedItem[[\"is_buy\"]] == TRUE)\n    focussedItemSell$unit_price <- focussedItemSell$unit_price * focussedItemSell$quantity\n    focussedItemBuy$unit_price <- focussedItemBuy$unit_price * focussedItemBuy$quantity * -1\n    \n    ggplot(focussedItemSell, aes(as.Date(date, format=\"%Y-%m-%dT%H:%M:%SZ\"), unit_price))+\n      geom_point(colour=\"green\")+\n      geom_point(data=focussedItemBuy, aes(as.Date(date, format=\"%Y-%m-%dT%H:%M:%SZ\"), unit_price), colour=\"red\")+\n      geom_smooth(method = \"lm\", formula = y ~ splines::bs(x, 3), se = FALSE)\n      \n  })\n  \n  output$table <- renderTable({\n    characterObj()[[\"transactOld\"]]\n    })\n  \n  output$tradenet <- renderText({\n    paste(\"Selected item (\", input$dynamic ,\") has a sell/buy net of \", format(netfunction(input$dynamic), big.mark=\",\"), \" ISK\")\n    \n  })\n\n}\n",
    "created" : 1519488088044.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1764743708",
    "id" : "C4C13CE3",
    "lastKnownWriteTime" : 1521986830,
    "last_content_update" : 1521986830867,
    "path" : "D:/R-workspace/REVE/wallet_transactions_dl/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}